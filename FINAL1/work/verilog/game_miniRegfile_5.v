/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_miniRegfile_5 (
    input clk,
    input rst,
    input [3:0] rc,
    input we,
    input [15:0] data,
    input [3:0] ra,
    input [3:0] rb,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [15:0] literal,
    output reg [15:0] isP1,
    output reg [15:0] sequenceCount,
    output reg [15:0] p1Sequence,
    output reg [15:0] p2Sequence,
    output reg [15:0] tempvar1,
    output reg [15:0] tempvar2,
    output reg [15:0] addValue,
    output reg [15:0] loopVar
  );
  
  
  
  reg [15:0] M_p1_sequence_d, M_p1_sequence_q = 1'h0;
  reg [15:0] M_p2_sequence_d, M_p2_sequence_q = 1'h0;
  reg [15:0] M_sequence_count_d, M_sequence_count_q = 1'h0;
  reg [15:0] M_p1_score_d, M_p1_score_q = 1'h0;
  reg [15:0] M_p2_score_d, M_p2_score_q = 1'h0;
  reg [15:0] M_round_d, M_round_q = 1'h0;
  reg [15:0] M_is_p1_d, M_is_p1_q = 1'h0;
  reg [15:0] M_literal_out_d, M_literal_out_q = 1'h0;
  reg [15:0] M_temp_var1_d, M_temp_var1_q = 1'h0;
  reg [15:0] M_temp_var2_d, M_temp_var2_q = 1'h0;
  reg [15:0] M_addvalue_d, M_addvalue_q = 1'h0;
  reg [15:0] M_loop_var_d, M_loop_var_q = 1'h0;
  
  always @* begin
    M_sequence_count_d = M_sequence_count_q;
    M_p1_score_d = M_p1_score_q;
    M_literal_out_d = M_literal_out_q;
    M_addvalue_d = M_addvalue_q;
    M_round_d = M_round_q;
    M_p2_sequence_d = M_p2_sequence_q;
    M_temp_var1_d = M_temp_var1_q;
    M_temp_var2_d = M_temp_var2_q;
    M_is_p1_d = M_is_p1_q;
    M_p1_sequence_d = M_p1_sequence_q;
    M_p2_score_d = M_p2_score_q;
    M_loop_var_d = M_loop_var_q;
    
    
    case (ra)
      4'h0: begin
        out_a = M_p1_sequence_q;
      end
      4'h1: begin
        out_a = M_p2_sequence_q;
      end
      4'h2: begin
        out_a = M_sequence_count_q;
      end
      4'h3: begin
        out_a = M_p1_score_q;
      end
      4'h4: begin
        out_a = M_p2_score_q;
      end
      4'h5: begin
        out_a = M_round_q;
      end
      4'h6: begin
        out_a = M_is_p1_q;
      end
      4'h7: begin
        out_a = M_temp_var1_q;
      end
      4'h8: begin
        out_a = M_temp_var2_q;
      end
      4'h9: begin
        out_a = M_addvalue_q;
      end
      4'ha: begin
        out_a = M_literal_out_q;
      end
      4'hb: begin
        out_a = M_loop_var_q;
      end
      default: begin
        out_a = 1'h0;
      end
    endcase
    
    case (rb)
      4'h0: begin
        out_b = M_p1_sequence_q;
      end
      4'h1: begin
        out_b = M_p2_sequence_q;
      end
      4'h2: begin
        out_b = M_sequence_count_q;
      end
      4'h3: begin
        out_b = M_p1_score_q;
      end
      4'h4: begin
        out_b = M_p2_score_q;
      end
      4'h5: begin
        out_b = M_round_q;
      end
      4'h6: begin
        out_b = M_is_p1_q;
      end
      4'h7: begin
        out_b = M_temp_var1_q;
      end
      4'h8: begin
        out_b = M_temp_var2_q;
      end
      4'h9: begin
        out_b = M_addvalue_q;
      end
      4'ha: begin
        out_b = M_literal_out_q;
      end
      4'hb: begin
        out_b = M_loop_var_q;
      end
      default: begin
        out_b = 1'h0;
      end
    endcase
    if (we) begin
      
      case (rc)
        4'h0: begin
          M_p1_sequence_d = data;
        end
        4'h1: begin
          M_p2_sequence_d = data;
        end
        4'h2: begin
          M_sequence_count_d = data;
        end
        4'h3: begin
          M_p1_score_d = data;
        end
        4'h4: begin
          M_p2_score_d = data;
        end
        4'h5: begin
          M_round_d = data;
        end
        4'h6: begin
          M_is_p1_d = data;
        end
        4'h7: begin
          M_temp_var1_d = data;
        end
        4'h8: begin
          M_temp_var2_d = data;
        end
        4'h9: begin
          
          case (M_sequence_count_q)
            16'h0000: begin
              M_addvalue_d = 16'h0001;
            end
            16'h0001: begin
              M_addvalue_d = 16'h0002;
            end
            16'h0002: begin
              M_addvalue_d = 16'h0004;
            end
            16'h0003: begin
              M_addvalue_d = 16'h0008;
            end
            16'h0004: begin
              M_addvalue_d = 16'h0010;
            end
            16'h0005: begin
              M_addvalue_d = 16'h0020;
            end
            16'h0006: begin
              M_addvalue_d = 16'h0040;
            end
            16'h0007: begin
              M_addvalue_d = 16'h0080;
            end
            16'h0008: begin
              M_addvalue_d = 16'h0100;
            end
            16'h0009: begin
              M_addvalue_d = 16'h0200;
            end
            16'h000a: begin
              M_addvalue_d = 16'h0400;
            end
            16'h000b: begin
              M_addvalue_d = 16'h0800;
            end
            16'h000c: begin
              M_addvalue_d = 16'h1000;
            end
            16'h000d: begin
              M_addvalue_d = 16'h2000;
            end
            16'h000e: begin
              M_addvalue_d = 16'h4000;
            end
            16'h000f: begin
              M_addvalue_d = 16'h8000;
            end
            default: begin
              M_addvalue_d = 16'h0000;
            end
          endcase
        end
        4'ha: begin
          M_literal_out_d = data;
        end
        4'hb: begin
          M_loop_var_d = data;
        end
      endcase
    end
    literal = M_literal_out_q;
    isP1 = M_is_p1_q;
    tempvar1 = M_temp_var1_q;
    tempvar2 = M_temp_var2_q;
    sequenceCount = M_sequence_count_q;
    p1Sequence = M_p1_sequence_q;
    p2Sequence = M_p2_sequence_q;
    addValue = M_addvalue_q;
    loopVar = M_loop_var_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_p1_sequence_q <= 1'h0;
      M_p2_sequence_q <= 1'h0;
      M_sequence_count_q <= 1'h0;
      M_p1_score_q <= 1'h0;
      M_p2_score_q <= 1'h0;
      M_round_q <= 1'h0;
      M_is_p1_q <= 1'h0;
      M_literal_out_q <= 1'h0;
      M_temp_var1_q <= 1'h0;
      M_temp_var2_q <= 1'h0;
      M_addvalue_q <= 1'h0;
      M_loop_var_q <= 1'h0;
    end else begin
      M_p1_sequence_q <= M_p1_sequence_d;
      M_p2_sequence_q <= M_p2_sequence_d;
      M_sequence_count_q <= M_sequence_count_d;
      M_p1_score_q <= M_p1_score_d;
      M_p2_score_q <= M_p2_score_d;
      M_round_q <= M_round_d;
      M_is_p1_q <= M_is_p1_d;
      M_literal_out_q <= M_literal_out_d;
      M_temp_var1_q <= M_temp_var1_d;
      M_temp_var2_q <= M_temp_var2_d;
      M_addvalue_q <= M_addvalue_d;
      M_loop_var_q <= M_loop_var_d;
    end
  end
  
endmodule
