module seven_seg_split_out (
    input clk,  // clock
    input rst,  // reset
    
    input split_chosen[16], // from regfile, reads register's value
    output seg_tolight[7],
    output dig_tolight[2]
  ) {
  .clk(clk) {
    .rst(rst) {
      multi_seven_seg seg_display;
    }
  }

  always {
    seg_tolight = 0;
    dig_tolight = 0;
    seg_display.values = {5b0, 5b0};
    case (split_chosen) {
      5h0000: seg_display.values = {5h0, 5h0}; //0
      5h0001: seg_display.values = {5h1, 5h0}; //1
      5h0002: seg_display.values = {5h2, 5h0}; //2
      5h0003: seg_display.values = {5h3, 5h0}; //3
      5h0004: seg_display.values = {5h4, 5h0}; //4
      5h0005: seg_display.values = {5h5, 5h0}; //5
      5h0006: seg_display.values = {5h6, 5h0}; //6
      5h0007: seg_display.values = {5h7, 5h0}; //7
      5h0008: seg_display.values = {5h8, 5h0}; //8
      5h0009: seg_display.values = {5h9, 5h0}; //9
      5h000A: seg_display.values = {5h1, 5h0}; //10
      5h000B: seg_display.values = {5h1, 5h1}; //11
      5h000C: seg_display.values = {5h1, 5h2}; //12
      5h000D: seg_display.values = {5h1, 5h3}; //13
      5h000E: seg_display.values = {5h1, 5h4}; //14
      5h000F: seg_display.values = {5h1, 5h5}; //15
      5h0010: seg_display.values = {5hD, 5h1}; //p1
      5h0011: seg_display.values = {5hD, 5h2}; //p2
      5h0012: seg_display.values = {5h14, 5h0};//t
      default: seg_display.values = {5b11111,5b11111};
    }
    seg_tolight = ~seg_display.seg;
    dig_tolight = ~seg_display.sel;
  }
}