module au_top (
  input clk,  // clock
  input rst_n,  // reset
  input player_button1,
  input player_button2,
  input reset_button,
  input usb_rx,
  output usb_tx,                // USB->Serial output
  output green_led,
  output red_led,
  output seven_seg_p1_seg[7],
  output seven_seg_p1_sel[2],
  output seven_seg_p2_seg[7],
  output seven_seg_p2_sel[2],
  output seven_seg_rounds_seg[7],
  output seven_seg_rounds_sel[2]
  ) {
  
  sig rst;                  // reset signal
  sig pb1; 
  sig pb2;
  sig pr;
  sig inputAlu_a[16];
  sig inputAlu_b[16];
  sig split_boolean;
  sig split_choice[16];
  sig isp1[16];
  
    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    reset_conditioner reset_cond;
    
    button_conditioner p_button1;
    button_conditioner p_button2;
    button_conditioner r_button;

//    edge_detector p_bl (#RISE(1), #FALL(0));
//    edge_detector p_b2 (#RISE(1), #FALL(0));
//    edge_detector p_r (#RISE(1), #FALL(0));

    .rst(rst){
      seven_seg_split_out split_display;
      game_cu control_unit;
      game_miniRegfile register_file;
      multi_seven_seg segp1;
      multi_seven_seg segp2;
      multi_seven_seg segrounds;
    }
   
  }
  
  alu16 game_alu;

  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    //green_led = 1b1;       // turn LEDs off
    //red_led = 1b1;
    
    seven_seg_p1_sel = hf;
    seven_seg_p1_seg = hf;
    seven_seg_p2_sel = hf;
    seven_seg_p2_seg = hf;
    seven_seg_rounds_sel = hf;
    seven_seg_rounds_seg = hf;
    
    segp1.values = {5h0, 5h0};
    seven_seg_p1_seg= ~segp1.seg;
    seven_seg_p1_sel= ~segp1.sel;
    
    segp2.values = {5h0, 5h0};
    seven_seg_p2_seg= ~segp2.seg;
    seven_seg_p2_sel= ~segp2.sel;
    
    segrounds.values = {5h0, 5h0};
    seven_seg_rounds_seg= ~segrounds.seg;
    seven_seg_rounds_sel= ~segrounds.sel;
   
    p_button1.in = player_button1;
    pb1 = p_button1.out;

    p_button2.in = player_button2;
    pb2 = p_button2.out;

    r_button.in = reset_button;
    pr = r_button.out;
    
    control_unit.btn1 = pb1;
    control_unit.btn2 = pb2;
    control_unit.btn_reset = pr;
    
    register_file.ra = control_unit.ra;
    register_file.rb = control_unit.rb;
    register_file.rc = control_unit.rc;
    register_file.we = control_unit.we;  
   
    control_unit.sequenceCount = register_file.sequenceCount;
    control_unit.p1_sequence = register_file.p1Sequence;
    control_unit.p2_sequence = register_file.p2Sequence;
    
    
    // asel mux
    case(control_unit.asel){
      b00  : inputAlu_a = register_file.out_a;
      b01  : inputAlu_a = h0000;
      default : 
          inputAlu_a = h0000;
    }
    
    // bsel mux
    case(control_unit.bsel){
      b000 : inputAlu_b = register_file.out_b;
      b001 : inputAlu_b = h0000;
      b010 : inputAlu_b = h0001;
      b011 : inputAlu_b = h0005;
      b100 : inputAlu_b = h000F;
      b101 : inputAlu_b = h0012; 
      default: 
          inputAlu_b = h0000;
    }
    
    // ALU
    game_alu.x = inputAlu_a;
    game_alu.y = inputAlu_b;
    game_alu.alufn = control_unit.alufn;
   
    
    // wdsel mux
    case (control_unit.wdsel){
      b00 : register_file.data = game_alu.out;
      b01 : register_file.data = b1111111111111111;
      b10 : register_file.data = b0000000000001111;
      b11 : register_file.data = b0000000000000000;
      default :
          register_file.data = game_alu.out;
    }    

    
    split_boolean = control_unit.split_yes;

    split_choice = register_file.literal;
    isp1 = register_file.isP1;
    control_unit.isP1 = register_file.isP1;
    control_unit.tempvar1 = register_file.tempvar1;
    control_unit.tempvar2 = register_file.tempvar2;

    split_display.split_chosen = 16hffff;

    // Give output to 7-segments
    
    if (split_boolean) {
      split_display.split_chosen = split_choice;
      if (isp1 == 1) {
        seven_seg_p1_seg = split_display.seg_tolight;
        seven_seg_p1_sel = split_display.dig_tolight;
      }
      else if (isp1 == 0) {
        seven_seg_p2_seg = split_display.seg_tolight;
        seven_seg_p2_sel = split_display.dig_tolight;
      }
    }
        
    green_led = control_unit.green_led;
    red_led = control_unit.red_led;

  }
    
  /*
    usb_tx=0;
    green_led=0;
    red_led=0;
    seven_seg_p1_seg=7b0;
    seven_seg_p1_sel=7b0;
    seven_seg_p2_seg=7b0;
    seven_seg_p2_sel=7b0;
    seven_seg_rounds_seg=7b0;
    seven_seg_rounds_sel=7b0;
    test.x=16b0;
    test.y=16b0;
    test.alufn=6b0;
    
    a.isP1=0;
    a.rst=0;
    a.btn_reset=0;
    a.p1_sequence=0;
    a.p2_sequence=0;
    a.tempvar1=0;
    a.tempvar2=0;
    a.clk=0;
    a.sequenceCount=0;
    a.btn1=0;
    a.btn2=0;
  }*/
}
