/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_tester_2 (
    input clk,
    input rst,
    input [2:0] button,
    output reg [2:0] out_state,
    output reg [1:0] out_status
  );
  
  
  
  wire [2-1:0] M_test_adder_status;
  reg [1-1:0] M_test_adder_start;
  adderTester_8 test_adder (
    .clk(clk),
    .rst(rst),
    .start(M_test_adder_start),
    .status(M_test_adder_status)
  );
  
  wire [2-1:0] M_test_compare_status;
  reg [1-1:0] M_test_compare_start;
  comparatorTester_9 test_compare (
    .clk(clk),
    .rst(rst),
    .start(M_test_compare_start),
    .status(M_test_compare_status)
  );
  
  wire [2-1:0] M_test_boole_status;
  reg [1-1:0] M_test_boole_start;
  booleanTester_10 test_boole (
    .clk(clk),
    .rst(rst),
    .start(M_test_boole_start),
    .status(M_test_boole_status)
  );
  
  wire [2-1:0] M_test_shifter_status;
  reg [1-1:0] M_test_shifter_start;
  shifterTester_11 test_shifter (
    .clk(clk),
    .rst(rst),
    .start(M_test_shifter_start),
    .status(M_test_shifter_status)
  );
  
  wire [2-1:0] M_test_multiply_status;
  reg [1-1:0] M_test_multiply_start;
  multiplierTester_12 test_multiply (
    .clk(clk),
    .rst(rst),
    .start(M_test_multiply_start),
    .status(M_test_multiply_status)
  );
  
  wire [2-1:0] M_test_error_status;
  reg [1-1:0] M_test_error_start;
  errorTester_13 test_error (
    .clk(clk),
    .rst(rst),
    .start(M_test_error_start),
    .status(M_test_error_status)
  );
  
  
  localparam IDLE_state = 3'd0;
  localparam ADDER_state = 3'd1;
  localparam COMPARATOR_state = 3'd2;
  localparam BOOLEAN_state = 3'd3;
  localparam SHIFTER_state = 3'd4;
  localparam MULTIPLIER_state = 3'd5;
  localparam ERROR_state = 3'd6;
  
  reg [2:0] M_state_d, M_state_q = IDLE_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_test_adder_start = 1'h0;
    M_test_compare_start = 1'h0;
    M_test_boole_start = 1'h0;
    M_test_shifter_start = 1'h0;
    M_test_multiply_start = 1'h0;
    M_test_error_start = 1'h0;
    out_status = 2'h0;
    out_state = M_state_q;
    
    case (M_state_q)
      IDLE_state: begin
        out_status = 2'h0;
        if (button[0+0-:1]) begin
          M_state_d = ERROR_state;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = M_state_q + 1'h1;
          end
        end
      end
      ADDER_state: begin
        M_test_adder_start = 1'h1;
        out_status = M_test_adder_status;
        if (button[0+0-:1]) begin
          M_state_d = M_state_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = M_state_q + 1'h1;
          end
        end
      end
      COMPARATOR_state: begin
        M_test_compare_start = 1'h1;
        out_status = M_test_compare_status;
        if (button[0+0-:1]) begin
          M_state_d = M_state_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = M_state_q + 1'h1;
          end
        end
      end
      BOOLEAN_state: begin
        M_test_boole_start = 1'h1;
        out_status = M_test_boole_status;
        if (button[0+0-:1]) begin
          M_state_d = M_state_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = M_state_q + 1'h1;
          end
        end
      end
      SHIFTER_state: begin
        M_test_shifter_start = 1'h1;
        out_status = M_test_shifter_status;
        if (button[0+0-:1]) begin
          M_state_d = M_state_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = M_state_q + 1'h1;
          end
        end
      end
      MULTIPLIER_state: begin
        M_test_multiply_start = 1'h1;
        out_status = M_test_multiply_status;
        if (button[0+0-:1]) begin
          M_state_d = M_state_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = M_state_q + 1'h1;
          end
        end
      end
      ERROR_state: begin
        M_test_error_start = 1'h1;
        out_status = M_test_error_status;
        if (button[0+0-:1]) begin
          M_state_d = M_state_q - 1'h1;
        end else begin
          if (button[1+0-:1]) begin
            M_state_d = IDLE_state;
          end
        end
      end
    endcase
    if (button[2+0-:1]) begin
      M_state_d = IDLE_state;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
