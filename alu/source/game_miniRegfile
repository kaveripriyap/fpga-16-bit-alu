module game_miniRegfile (       // regfile has two read ports and one write port
    input clk,                  // clock
    input rst,                  // reset
    input write_address[4],     // write address for port c
    input we,                   // write enable
    input data[16],             // data in for port c
    
    
    input read_address_a[4], // address port a 
    input read_address_b[4], // address port b
    output out_a[16],        // read port a
    output out_b[16]         // read port b
  ) {  
  
  .clk(clk){
    .rst(rst){
      dff p1_sequence[16];
      dff p2_sequence[16];
      dff sequence_count[16];
      dff p1_score[5];
      dff p2_score[5];
      dff round[8];
      dff is_p1[1];



    }
  }
  
  always {   
    
    // read port a
    case(read_address_a) {
        b0000 : out_a = p1_sequence.q;    // stores the player 1 sequence value
        b0001 : out_a = p2_sequence.q;    // stores the player 2 sequence value
        b0010 : out_a = sequence_count;   // stores the current button sequence count
        b0011 : out_a = p1_score;         // stores player 1's current score
        b0100 : out_a = p2_score;         // stores player 2's current score
        b0101 : out_a = round;            // stores the current round
        b0110 : out_a = is_p1;            // checks if the current player is player 1
        b0111 : out_a = 0;                // 
        b1000 : out_a = pattern.q[8];     // 
        b1001 : out_a = lvl_count.q;      // 
        b1010 : out_a = seq_count.q;      // 
        b1011 : out_a = gen_disp_state.q; // 
        b1100 : out_a = timer_store.q;    // 
        b1101 : out_a = temp_var.q[0];    // temporary registers
        b1110 : out_a = temp_var.q[1];    // 
        b1111 : out_a = temp_var.q[2];    // 
        default: out_a = 0;
    }
    
    // read port b
    case(read_address_b) {
        b0000 : out_b = p1_sequence.q;    // stores the player 1 sequence value
        b0001 : out_b = p2_sequence.q;    // stores the player 2 sequence value
        b0010 : out_b = sequence_count;   // stores the current button sequence count
        b0011 : out_b = p1_score;         // stores player 1's current score
        b0100 : out_b = p2_score;         // stores player 2's current score
        b0101 : out_b = round;            // stores the current round
        b0110 : out_b = is_p1;            // checks if the current player is player 1
        b0111 : out_b = 0;                // 
        b1000 : out_b = pattern.q[8];     // 
        b1001 : out_b = lvl_count.q;      // 
        b1010 : out_b = seq_count.q;      // 
        b1011 : out_b = gen_disp_state.q; // 
        b1100 : out_b = timer_store.q;    // 
        b1101 : out_b = temp_var.q[0];    // 
        b1110 : out_b = temp_var.q[1];    // 
        b1111 : out_b = temp_var.q[2];    // 
        default: out_b = 0;
    }
    
    // write port
    if (we){
      case(write_address) {
        b0000 : p1_sequence.d = data; 
        b0001 : p2_sequence.d = data; 
        b0010 : sequence_count.d = data; 
        b0011 : p1_score.d = data; 
        b0100 : p2_score.d = data; 
        b0101 : round.d = data; 
        b0110 : is_p1.d = data; 
        b0111 : pattern.d[7] = data; 
        b1000 : pattern.d[8] = data;
        b1001 : lvl_count.d = data; 
        b1010 : seq_count.d = data;
        b1011 : gen_disp_state.d =data;
        b1100 : timer_store.d = data;
        b1101 : temp_var.d[0] = data; 
        b1110 : temp_var.d[1] = data;
        b1111 : temp_var.d[2] = data;
      }
    }    
  }
}