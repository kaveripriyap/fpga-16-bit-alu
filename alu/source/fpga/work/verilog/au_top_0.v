/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_regX_d, M_regX_q = 1'h0;
  reg [15:0] M_regY_d, M_regY_q = 1'h0;
  reg [5:0] M_regAlufn_d, M_regAlufn_q = 1'h0;
  reg [15:0] M_regOut_d, M_regOut_q = 1'h0;
  reg M_regZ_d, M_regZ_q = 1'h0;
  reg M_regV_d, M_regV_q = 1'h0;
  reg M_regN_d, M_regN_q = 1'h0;
  reg [15:0] M_regRightAnswer_d, M_regRightAnswer_q = 1'h0;
  reg [7:0] M_register_status_d, M_register_status_q = 1'h0;
  reg [28:0] M_counter_d, M_counter_q = 1'h0;
  reg [3:0] M_stateCase_d, M_stateCase_q = 1'h0;
  localparam INITIAL_states = 4'd0;
  localparam MANUAL_states = 4'd1;
  localparam ADDER1_states = 4'd2;
  localparam ADDER2_states = 4'd3;
  localparam COMPEQ_states = 4'd4;
  localparam COMPLT_states = 4'd5;
  localparam BOOLAND_states = 4'd6;
  localparam BOOLXNOR_states = 4'd7;
  localparam SHIFTLEFT_states = 4'd8;
  localparam SHIFTRIGHTA_states = 4'd9;
  localparam SHOWB_states = 4'd10;
  localparam NOTA_states = 4'd11;
  localparam MULTIPLY_states = 4'd12;
  
  reg [3:0] M_states_d, M_states_q = INITIAL_states;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [32-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [16-1:0] M_alutop_out;
  wire [1-1:0] M_alutop_z;
  wire [1-1:0] M_alutop_v;
  wire [1-1:0] M_alutop_n;
  reg [16-1:0] M_alutop_x;
  reg [16-1:0] M_alutop_y;
  reg [6-1:0] M_alutop_alufn;
  alu_16_3 alutop (
    .x(M_alutop_x),
    .y(M_alutop_y),
    .alufn(M_alutop_alufn),
    .out(M_alutop_out),
    .z(M_alutop_z),
    .v(M_alutop_v),
    .n(M_alutop_n)
  );
  
  localparam TIMER = 5'h1c;
  
  reg [15:0] x;
  
  reg [15:0] y;
  
  reg [15:0] alu;
  
  reg [5:0] alufn;
  
  always @* begin
    M_states_d = M_states_q;
    M_regY_d = M_regY_q;
    M_regX_d = M_regX_q;
    M_regRightAnswer_d = M_regRightAnswer_q;
    M_regZ_d = M_regZ_q;
    M_stateCase_d = M_stateCase_q;
    M_regV_d = M_regV_q;
    M_regAlufn_d = M_regAlufn_q;
    M_counter_d = M_counter_q;
    M_regOut_d = M_regOut_q;
    M_regN_d = M_regN_q;
    M_register_status_d = M_register_status_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 32'h0f0f0f0f;
    x = 16'h0000;
    y = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    alufn = io_dip[16+5-:6];
    M_alutop_alufn = alufn;
    io_led[0+15-:16] = x;
    M_alutop_x = x;
    M_alutop_y = y;
    alu = M_alutop_out;
    
    case (M_states_q)
      INITIAL_states: begin
        M_seg_values = 32'h0f0f0f0f;
        if (io_button[4+0-:1] == 1'h1) begin
          M_states_d = ADDER1_states;
        end
        if (io_dip[23+0-:1]) begin
          M_seg_values = 32'h15000000;
          M_states_d = MANUAL_states;
        end
      end
      MANUAL_states: begin
        io_led[23+0-:1] = 1'h1;
        if (io_button[0+0-:1]) begin
          x = io_dip[0+15-:16];
          M_regX_d = x;
          M_regOut_d = x;
        end
        if (io_button[1+0-:1]) begin
          y = io_dip[0+15-:16];
          M_regY_d = y;
          M_regOut_d = y;
        end
        if (io_button[2+0-:1]) begin
          alufn = io_dip[16+5-:6];
          M_regAlufn_d = alufn;
          M_alutop_alufn = M_regAlufn_q;
          M_alutop_x = M_regX_q;
          M_alutop_y = M_regY_q;
          M_alutop_alufn = M_regAlufn_q;
          alu = M_alutop_out;
          M_regZ_d = M_alutop_z;
          M_regV_d = M_alutop_v;
          M_regN_d = M_alutop_n;
          M_regOut_d = alu;
        end
        if (io_button[3+0-:1]) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
        end
        io_led[0+15-:16] = M_regOut_q;
        if (M_regZ_q == 1'h1) begin
          M_seg_values[16+7-:8] = 4'h1;
        end else begin
          M_seg_values[16+7-:8] = 4'h0;
        end
        if (M_regV_q == 1'h1) begin
          M_seg_values[8+7-:8] = 4'h1;
        end else begin
          M_seg_values[8+7-:8] = 4'h0;
        end
        if (M_regN_q == 1'h1) begin
          M_seg_values[0+7-:8] = 4'h1;
        end else begin
          M_seg_values[0+7-:8] = 4'h0;
        end
        io_led[16+5-:6] = M_regAlufn_q;
        if (!io_dip[23+0-:1]) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_states_d = INITIAL_states;
        end
      end
      ADDER1_states: begin
        M_regAlufn_d = 6'h00;
        M_regX_d = 16'h0005;
        M_regY_d = 16'h0003;
        M_regRightAnswer_d = 16'h0008;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h010f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0d0e0505;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = ADDER2_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      ADDER2_states: begin
        M_regAlufn_d = 6'h00;
        M_regX_d = 16'h7fff;
        M_regY_d = 16'h7fff;
        M_regRightAnswer_d = 16'hfffe;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h020f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = COMPEQ_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      COMPEQ_states: begin
        M_regAlufn_d = 6'h33;
        M_regX_d = 16'h0080;
        M_regY_d = 16'h0080;
        M_regRightAnswer_d = 16'h0001;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h030f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = COMPLT_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      COMPLT_states: begin
        M_regAlufn_d = 6'h3d;
        M_regX_d = 16'h0001;
        M_regY_d = 16'h000a;
        M_regRightAnswer_d = 16'h0001;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h040f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = BOOLAND_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      BOOLAND_states: begin
        M_regAlufn_d = 6'h11;
        M_regX_d = 16'hff00;
        M_regY_d = 16'h0f0f;
        M_regRightAnswer_d = 16'h0f00;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h050f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = BOOLXNOR_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      BOOLXNOR_states: begin
        M_regAlufn_d = 6'h1a;
        M_regX_d = 16'he54b;
        M_regY_d = 16'ha54a;
        M_regRightAnswer_d = 16'hbffe;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h060f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = SHIFTLEFT_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      SHIFTLEFT_states: begin
        M_regAlufn_d = 6'h20;
        M_regX_d = 16'hff00;
        M_regY_d = 16'h3003;
        M_regRightAnswer_d = 16'hf800;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h070f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = SHIFTRIGHTA_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      SHIFTRIGHTA_states: begin
        M_regAlufn_d = 6'h23;
        M_regX_d = 16'ha7ff;
        M_regY_d = 16'h0001;
        M_regRightAnswer_d = 16'hd3ff;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h080f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = SHOWB_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      SHOWB_states: begin
        M_regAlufn_d = 6'h14;
        M_regX_d = 16'hffff;
        M_regY_d = 16'h002a;
        M_regRightAnswer_d = 16'h002a;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h090f0f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = NOTA_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      NOTA_states: begin
        M_regAlufn_d = 6'h1b;
        M_regX_d = 16'hff00;
        M_regY_d = 16'h002a;
        M_regRightAnswer_d = 16'h00ff;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h01000f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = MULTIPLY_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
      MULTIPLY_states: begin
        M_regAlufn_d = 6'h02;
        M_regX_d = 16'h0004;
        M_regY_d = 16'h0004;
        M_regRightAnswer_d = 16'h0010;
        M_alutop_alufn = M_regAlufn_q;
        M_alutop_x = M_regX_q;
        M_alutop_y = M_regY_q;
        alu = M_alutop_out;
        M_regZ_d = M_alutop_z;
        M_regV_d = M_alutop_v;
        M_regN_d = M_alutop_n;
        if (M_stateCase_q == 1'h0) begin
          M_seg_values = 32'h01010f0f;
          M_register_status_d = {2'h0, M_regAlufn_q};
          M_regOut_d = 16'h0000;
        end
        if (M_stateCase_q == 1'h1) begin
          M_seg_values = 32'h0e0f0f0f;
          M_register_status_d = 6'h00;
          M_regOut_d = M_regX_q;
        end
        if (M_stateCase_q == 2'h2) begin
          M_seg_values = 32'h080f0f0f;
          M_regOut_d = M_regY_q;
        end
        if (M_stateCase_q == 2'h3) begin
          M_register_status_d = {5'h00, M_regZ_q, M_regV_q, M_regN_q};
          M_regOut_d = alu;
          if (M_regRightAnswer_q == alu) begin
            M_seg_values = 32'h0d0e0505;
          end else begin
            M_seg_values = 32'h0a0e0b0c;
          end
        end
        if (M_stateCase_q == 3'h4) begin
          M_regX_d = 16'h0000;
          M_regY_d = 16'h0000;
          M_regAlufn_d = 6'h00;
          M_register_status_d = 8'h00;
          M_regOut_d = 16'h0000;
          M_regZ_d = 1'h0;
          M_regV_d = 1'h0;
          M_regN_d = 1'h0;
          M_stateCase_d = 1'h0;
          M_states_d = INITIAL_states;
        end
        io_led[16+7-:8] = M_register_status_q;
        io_led[0+15-:16] = M_regOut_q;
        if (io_dip[23+0-:1]) begin
          M_states_d = MANUAL_states;
        end
        M_counter_d = M_counter_q + 1'h1;
        if (io_button[3+0-:1] | M_counter_q[28+0-:1] == 1'h1) begin
          M_stateCase_d = M_stateCase_q + 1'h1;
          M_counter_d = 1'h0;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_regX_q <= 1'h0;
      M_regY_q <= 1'h0;
      M_regAlufn_q <= 1'h0;
      M_regOut_q <= 1'h0;
      M_regZ_q <= 1'h0;
      M_regV_q <= 1'h0;
      M_regN_q <= 1'h0;
      M_regRightAnswer_q <= 1'h0;
      M_register_status_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_stateCase_q <= 1'h0;
      M_states_q <= 1'h0;
    end else begin
      M_regX_q <= M_regX_d;
      M_regY_q <= M_regY_d;
      M_regAlufn_q <= M_regAlufn_d;
      M_regOut_q <= M_regOut_d;
      M_regZ_q <= M_regZ_d;
      M_regV_q <= M_regV_d;
      M_regN_q <= M_regN_d;
      M_regRightAnswer_q <= M_regRightAnswer_d;
      M_register_status_q <= M_register_status_d;
      M_counter_q <= M_counter_d;
      M_stateCase_q <= M_stateCase_d;
      M_states_q <= M_states_d;
    end
  end
  
endmodule
